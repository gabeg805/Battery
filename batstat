#!/bin/bash
# ------------------------------------------------------------------------------
# 
# Name: batstat
# Author: Gabe Gonzalez
# 
# Brief: Display battery information.
# 
# ------------------------------------------------------------------------------

##
# Source utilities.
##
. "io.sh"

##
# Files/directories.
##
BATDIR="/sys/class/power_supply/BAT0"

##
# Options.
##
CHARGE=
INFO=
SHORT=

##
# Exit statuses.
##
EXIT_NO_OPT_ENTERED=10
EXIT_BATTERY_NOT_PRESENT=11

##
# Main.
##
main()
{
    cli_parse "${PROJECT}" "hcis" "help,charge,info,short" "${@}"

    # Determine which options were specified
    while true
    do
        case "${1}" in
            -h|--help)
                usage
                exit 0
                ;;

            -c|--charge)
                CHARGE=true
                ;;

            -i|--info)
                INFO=true
                ;;

            -s|--short)
                SHORT=true
                ;;

            --)
                break
                ;;

            *)
                break
                ;;
        esac
        shift
    done

    # Run checks
    if ! battery_is_present
    then
        print_msg "Battery not present."
        exit ${EXIT_BATTERY_NOT_PRESENT}
    fi

    # Run specified option
    if [ -n "${CHARGE}" ]
    then
        battery_print_charge
    elif [ -n "${INFO}" ]
    then
        battery_print_charge 
        battery_print_info 
    else
        usage
        exit ${EXIT_NO_OPT_ENTERED}
    fi
}

##
# Print program usage.
##
usage()
{
    echo "Usage: ${PROJECT} [options]"
    echo
    echo "Options:"
    echo "    -h, --help"
    echo "        Print program usage message."
    echo
    echo "    -c, --charge"
    echo "        Print the current battery charge."
    echo
    echo "    -i, --info"
    echo "        Print extra battery information."
    echo
    echo "    -s, --short"
    echo "        Shorten printed output. Note: Must be used with '-c' option."
}

##
# Print current battery charge.
##
battery_print_charge()
{
    local batnow=$(battery_get_charge)
    local batfull=$(battery_get_charge_full)
    local batstatus=$(battery_get_status)
    local charge=$(echo "scale=3; ${batnow} / ${batfull} * 100" \
                       | bc \
                       | sed 's/..$//')
    local msg="${charge}% (${batstatus})"
    if [ -n "${SHORT}" ]
    then
        echo "${msg}"
    else
        echo "Battery: ${msg}"
    fi
}

##
# Print extra battery information.
##
battery_print_info()
{
    local batfulldesign=$(battery_get_charge_full_design | sed 's/...$//')
    local batfull=$(battery_get_charge_full | sed 's/...$//')
    local battech=$(battery_get_technology)
    local capacity=$(echo "scale=3; ${batfull} / ${batfulldesign} * 100" \
        | bc \
        | sed 's/..$//')
    echo "* ${battech} battery"
    echo "* Design capacity ${batfulldesign} mAh"
    echo "* Current capacity ${batfull} mAh (${capacity}% of design)"
}

##
# Return the current battery charge.
##
battery_get_charge()
{
    local file="${BATDIR}/charge_now"
    local line=
    read -r line < "${file}"
    echo "${line}"
}

##
# Return the battery charge when battery is full.
##
battery_get_charge_full()
{
    local file="${BATDIR}/charge_full"
    local line=
    read -r line < "${file}"
    echo "${line}"
}

##
# Return the battery charge when battery is full, as it was designed.
##
battery_get_charge_full_design()
{
    local file="${BATDIR}/charge_full_design"
    local line=
    read -r line < "${file}"
    echo "${line}"
}

##
# Return the current battery status.
##
battery_get_status()
{
    local file="${BATDIR}/status"
    local line=
    read -r line < "${file}"
    echo "${line}"
}

##
# Return the battery technology.
##
battery_get_technology()
{
    local file="${BATDIR}/technology"
    local line=
    read -r line < "${file}"
    echo "${line}"
}

##
# Check if the battery is present.
##
battery_is_present()
{
    local file="${BATDIR}/present"
    local status=
    read -r status < "${file}"
    if [ ${status} -eq 1 ]
    then
        return 0
    fi
    return 1
}

##
# Run script.
##
main "${@}"
