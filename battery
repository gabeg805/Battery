#!/bin/bash
# ------------------------------------------------------------------------------
# 
# Name: battery
# Author: Gabe Gonzalez
# 
# Brief: Display battery information.
# 
# ------------------------------------------------------------------------------

##
# Project name.
##
PROJECT="${0##*/}"

##
# Files/directories.
##
BATTERY_DIR="/sys/class/power_supply/BAT0"
BATTERY_LEVEL_FILE="${BATTERY_DIR}/capacity"
BATTERY_NOW_FILE="${BATTERY_DIR}/charge_now"
BATTERY_FULL_FILE="${BATTERY_DIR}/charge_full"
BATTERY_FULL_DESIGN_FILE="${BATTERY_DIR}/charge_full_design"
BATTERY_POWER_FILE="${BATTERY_DIR}/power_now"
BATTERY_PRESENT_FILE="${BATTERY_DIR}/present"
BATTERY_TECH_FILE="${BATTERY_DIR}/technology"
BATTERY_STATUS_FILE="${BATTERY_DIR}/status"
BATTERY_UNITS_DIVIDER=1000

##
# Options.
##
INFO=
SHORT=

##
# Exit statuses.
##
EXIT_BATTERY_NOT_PRESENT=11

##
# Main.
##
main()
{
    if ! battery_is_present
    then
        echo "${PROJECT}: Battery not present." 1>&2
        return ${EXIT_BATTERY_NOT_PRESENT}
    fi

	battery_config

    if [ $# -eq 0 ]
    then
        battery_print
        return $?
    fi

	# Options
    local short="hiS"
    local long="help,info,short"
	local args=

    # Parse options
    args=$(getopt -o "${short}" --long "${long}" --name "${PROJECT}" \
				-- "${@}")
    if [ $? -ne 0 ]
    then
        usage
        exit 1
    fi
    eval set -- "${args}"

    while true
    do
        case "${1}" in
            -h|--help)
                usage
                return 0
                ;;
            -i|--info)
                INFO=true
                ;;
            -S|--short)
                SHORT=true
                ;;
            *)
                break
                ;;
        esac
        shift
    done

    # Run specified option
    battery_print
    if [ -n "${INFO}" ]
    then
        battery_print_info 
    fi

    return $?
}

##
# Print program usage.
##
usage()
{
    echo "Usage: ${PROJECT} [options]"
    echo
    echo "Options:"
    echo "    -h, --help"
    echo "        Print program usage message."
    echo 
    echo "    -i, --info"
    echo "        Print extra battery information."
    echo 
    echo "    -S, --short"
    echo "        Shorten printed output."
}

##
# Configure battery file paths and other miscellaneous items.
##
battery_config()
{
	if [ ! -f "${BATTERY_NOW_FILE}" ]
	then
    	BATTERY_NOW_FILE="${BATTERY_DIR}/energy_now"
		BATTERY_UNITS_DIVIDER=1000000
	fi

	if [ ! -f "${BATTERY_FULL_FILE}" ]
	then
    	BATTERY_FULL_FILE="${BATTERY_DIR}/energy_full"
	fi

	if [ ! -f "${BATTERY_FULL_DESIGN_FILE}" ]
	then
    	BATTERY_FULL_DESIGN_FILE="${BATTERY_DIR}/energy_full_design"
	fi
}

##
# Print current battery level.
##
battery_print()
{
    local level=$(battery_get_level)
    local status=$(battery_get_status)
    local msg="${level}% (${status})"

    if [ -n "${SHORT}" ]
    then
        echo "${msg}"
    else
        echo "Battery: ${msg}"
    fi
}

##
# Print extra battery information.
##
battery_print_info()
{
    local full=$(battery_get_full)
    local design=$(battery_get_full_design)
    local tech=$(battery_get_technology)
	local remaining=$(battery_get_time_remaining)
	local units=$(battery_get_units)
    local capacity=$(echo "scale=0; 100 * ${full} / ${design}" | bc)
    echo "* ${tech} battery"
	echo "* Time remaining: ${remaining}"
    echo "* Current capacity ${full} ${units} (${capacity}% of design)"
    echo "* Design capacity ${design} ${units}"
}

##
# Return the current battery level as a percentage.
##
battery_get_level()
{
	battery_read_file "${BATTERY_LEVEL_FILE}"
}

##
# Return the current battery level in mAh/Wh units.
##
battery_get_now()
{
	battery_read_file "${BATTERY_NOW_FILE}"
}

##
# Return the battery level when battery is full.
##
battery_get_full()
{
	local value=$(battery_read_file "${BATTERY_FULL_FILE}")
	echo "scale=2; ${value} / ${BATTERY_UNITS_DIVIDER}" | bc
}

##
# Return the battery level when battery is full, as it was designed.
##
battery_get_full_design()
{
    local value=$(battery_read_file "${BATTERY_FULL_DESIGN_FILE}")
	echo "scale=2; ${value} / ${BATTERY_UNITS_DIVIDER}" | bc
}

##
# Return the power usage now.
##
battery_get_power()
{
	battery_read_file "${BATTERY_POWER_FILE}"
}

##
# Return the current battery status.
##
battery_get_status()
{
	battery_read_file "${BATTERY_STATUS_FILE}"
}

##
# Return the battery technology.
##
battery_get_technology()
{
	battery_read_file "${BATTERY_TECH_FILE}"
}

##
# Return the amount of time remaining.
##
battery_get_time_remaining()
{
	local now=$(battery_get_now)
	local power=$(battery_get_power)

	if [ ${power} -eq 0 ]
	then
		echo "N/A"
		return 0
	fi

	local value=$(echo "scale=2; ${now} / ${power}" | bc)
	local hr=${value%%.*}
	local min=$[ $((10#${value##*.})) * 60 / 100 ]
	local hrunit=" hour"
	local minunit=" minute"

	if [ -z "${hr}" ]
	then
		hrunit=
	elif [ ${hr} -ne 1 ]
	then
		hrunit="${hrunit}s"
	fi

	if [ -z "${min}" ]
	then
		minunit=
	elif [ ${min} -ne 1 ]
	then
		minunit="${minunit}s"
	fi

	echo "${hr}${hrunit} ${min}${minunit}"
}

##
# Return the units of the battery level (either mAh or Wh).
##
battery_get_units()
{
	if [ ${BATTERY_UNITS_DIVIDER} -eq 1000 ]
	then
		echo "mAh"
	elif [ ${BATTERY_UNITS_DIVIDER} -eq 1000000 ]
	then
		echo "Wh"
	else
		:
	fi
}

##
# Read the first line in a file.
##
battery_read_file()
{
	local file="${1}"
	local line=
	read -r line < "${file}"
	echo "${line}"
}

##
# Check if the battery is present.
##
battery_is_present()
{
	if [ ! -d "${BATTERY_DIR}" ]
	then
		return 1
	fi

    local status=$(battery_read_file "${BATTERY_PRESENT_FILE}")

    if [ ${status} -eq 1 ]
    then
        return 0
    else
    	return 1
	fi
}

##
# Run script.
##
main "${@}"
